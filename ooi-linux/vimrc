" FIRST {{{

    set nocompatible

    " Put this here for easymotion not updating <leader>
    let mapleader=","
    nnoremap \ ,

" }}}

" Vundle {{{

    " Plugins {{{

        " Use Vim settings, rather than Vi settings (much better!).
        " This must be first, because it changes other options as a side effect.
        "set nocompatible             " be iMproved, required for Vundle
        filetype off                  " required for Vundle

        " set the runtime path to include Vundle and initialize
        set rtp+=~/.vim/bundle/Vundle.vim
        call vundle#begin()

        " In use {{{

            Plugin 'gmarik/Vundle.vim'                      " let Vundle manage Vundle, required
            Plugin 'airblade/vim-gitgutter'                 " Git in the sidebar!!!
            Plugin 'altercation/vim-colors-solarized'       " Solarized
            Plugin 'vim-airline/vim-airline-themes'         " Solarized themes
            Plugin 'bling/vim-airline'                      " Airline.
            Plugin 'Lokaltog/vim-easymotion'                " Easymotion
            Plugin 'mhinz/vim-startify'                     " SUPER COOL Startup screen
            Plugin 'powerline/fonts'                        " Powerline fonts for Airline
            Plugin 'Raimondi/delimitMate'                   " Delimiter completion
            Plugin 'scrooloose/nerdcommenter'               " Commenting.
            Plugin 'nvie/vim-flake8'                        " Do pep8 stuff
            Plugin 'tpope/vim-endwise'                      " Adds 'end' keywords for some languages
            Plugin 'tpope/vim-surround'                     " ds, cs, ys
            Plugin 'tpope/vim-vinegar'                      " Enhanse netrw
            Plugin 'Yggdroot/indentLine'                    " Lines on indends (with spaces)

        " }}}

        " Currently broken. Needs vim update. {{{

            " Plugin 'vim-scripts/diffchar.vim'               " Do diffs by char, not lines

        " }}}

        " Implement {{{

            " PHP
            " https://github.com/spf13/PIV

            " <C-p>
            " https://github.com/kien/ctrlp.vim

            " Snippets
            " https://github.com/SirVer/ultisnips           " Best?
            " https://github.com/garbas/vim-snipmate
            " https://github.com/honza/vim-snippets
            " https://github.com/msanders/snipmate.vim
            " https://github.com/Shougo/neosnippet.vim

            " Completion
            " Plugin 'Valloric/YouCompleteMe'               " Code completion
            " neocomplete

            " Stuff from spf13 or nearby
            " https://github.com/junegunn/vim-xmark         " Markdown preview

            " Alignment
            " https://github.com/godlygeek/tabular
            " https://github.com/junegunn/vim-easy-align

            " Git stuff instead of default GitGutter
            " https://github.com/tpope/vim-fugitive

            " Worth it???
            " https://github.com/spf13/spf13-vim

            " Syntax checking
            " https://github.com/scrooloose/syntastic

            " Different auto-close
            " https://github.com/spf13/vim-autoclose

            " http://spf13.com/post/ultimate-vim-config

        " }}}

        " Test {{{

            " Plugin 'itchyny/lightline.vim'                " Superior to Airline?
            " Plugin 'rizzatti/dash.vim'                    " Maybe Dash.app will play nice?
            " Plugin 'terryma/vim-multiple-cursors'         " Multiple cursors

        " }}}

        " Formerly used and worth keeping around {{{

            " Plugin 'bronson/vim-trailing-whitespace'      " Trailing whitespace
            " Plugin 'flazz/vim-colorschemes'               " ALL THE COLORSCHEMES.
            " Plugin 'jnurmine/Zenburn'                     " Already exists. Zenburn. Me gusta.
            " Plugin 'kien/rainbow_parentheses'             " Rainbow parens
            " Plugin 'nathanaelkane/vim-indent-guides'      " Indent guides
            " Plugin 'tobiasgehring/ShowMarks'              " Based on vim-scripts/ShowMarks. Just don't use marks yet.

        " }}}

        " Examples {{{

            " plugin on GitHub repo
            " Plugin 'tpope/vim-fugitive'

            " plugin from http://vim-scripts.org/vim/scripts.html
            " Plugin 'L9'

            " Git plugin not hosted on GitHub
            " Plugin 'git://git.wincent.com/command-t.git'

            " git repos on your local machine (i.e. when working on your own plugin)
            " Plugin 'file:///home/gmarik/path/to/plugin'

            " The sparkup vim script is in a subdirectory of this repo called vim.
            " Pass the path to set the runtimepath properly.
            " Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

            " Avoid a name conflict with L9
            " Plugin 'user/L9', {'name': 'newL9'}

        " }}}

        call vundle#end()
        filetype plugin indent on    " required for Vundle
        " To ignore plugin indent changes, instead use:
        "filetype plugin on
        "
        " see :h vundle for more details or wiki for FAQ
        " Put your non-Plugin stuff after this line

    " }}}

    " matchit.vim {{{

        " Load matchit.vim, but only if the user hasn't installed a newer version.
        if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
            runtime! macros/matchit.vim
        endif

    " }}}

" }}}

" Necessary basics {{{

    syntax on
    filetype plugin indent on

" }}}

" Sets {{{

    set history=1000
    set hidden
    " Needs 7.3
    " set undofile
    " set undodir=/home/race/.vim/undo/

    " Dangerous...
    " set autowrite

    " Display {{{

        " Font {{{

            " set guifont=Source_Code_Pro_Light:h14

            set t_Co=16
            for scheme in ['solarized', 'molokai', 'desert', 'default']
                try
                    if scheme == 'molokai'
                        set t_Co=256
                    endif
                    execute 'colorscheme '.scheme
                    break
                catch
                    continue
                endtry
            endfor
            set background=dark

            let g:solarized_termtrans = 0           " Transparent terminal?

        " }}}

        set autochdir
        set number
        set showcmd
        set showmatch
        set splitbelow
        set splitright
        set whichwrap=b,s,h,l,<,>,[,] " Only doesn't include ~
        set wrap

        set list
        set listchars=trail:×,nbsp:⋅,tab:>-,extends:»,precedes:«,eol:¬
        set linebreak

        set laststatus=2
        set cmdheight=2

        set shortmess=aoOtTI
        set lazyredraw
        set sidescroll=1


        " Doesn't work with airline. {{{
            " set ruler                   " Show the ruler
            " set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
        " }}}

        " ColorColumn {{{

            if exists('+colorcolumn')
                let &colorcolumn=join(range(81,300),",")
            else
                "call matchadd('ColorColumn', '\(\%80v\|\%100v\)')
                match Colorcolumn /\%81v.\+/
            endif

        " }}}

        " Add an indicator when lines are wrapped
        let &showbreak='+++ '
        " Put the indicator in the number column
        set cpoptions+=n

        " Wildmenu {{{

            set wildmenu
            set wildignore=*.sw*,*.so,*.o,*.kate-swp,*.lo,*.pyc
            set wildmode=list:longest,full

        " }}}

        " netrw {{{

            let g:netrw_list_hide = '
                        \.*~$,
                        \.*\.pyc$,
                        \.*\.swp$
                        \'

        " }}}
    " }}}

    " Editing {{{

        " allow backspacing over everything in insert mode
        set backspace=indent,eol,start

        " http://vim.wikia.com/wiki/Selecting_your_pasted_text
        nnoremap <expr> vp '`[' . strpart(getregtype(), 0, 1) . '`]'

        " Tabs {{{

            set shiftwidth=4
            set softtabstop=4
            set tabstop=4
            set expandtab
            set smarttab

        " }}}

        " Auto-completion {{{

            set completeopt=longest,menuone

        " }}}

        set textwidth=0
        set wrapmargin=0

        set formatoptions=tcrqn
        " Need newer vim
        " set formatoptions+=j

        " Backups {{{

            set backup
            if has('win32')
                set backupdir="$HOME\\vimfiles\\_backup, ."
                set directory="$HOME\\vimfiles\\_swp, ."
            else
                set backupdir=$HOME/.vim/backup//
                set directory=$HOME/.vim/swp//
            endif

        " }}}

    " }}}

    " Fold {{{

        set foldmethod=marker

    " }}}

    " Search {{{

        set hlsearch
        set incsearch
        set gdefault
        set ignorecase
        set smartcase

        " https://www.linux.com/news/vim-tips-moving-around-using-marks-and-jumps
        " how many files to save mark info for, whether to save global marks (f0 or f1)
        set viminfo='1000,f1

    " }}}

    " Mouse {{{

        if has('mouse')
          set mouse=a
          set mousemodel=popup_setpos
        endif

    " }}}


" }}}

" Plugin customization {{{

    " Airline {{{

        let g:airline#extensions#tabline#enabled = 1            " Adding tab line.
        let g:airline#extensions#tabline#show_close_button = 0

        " Be powerful?
        " let g:airline_powerline_fonts=1
        let g:airline_powerline_fonts=0
        let g:airline_left_sep = ''
        let g:airline_right_sep = ''

    " }}}

    " Align {{{

        " Commas.
        vnoremap <leader>t, :Align ,<CR>:FixWhitespace<CR>
        nnoremap <leader>t, :Align ,<CR>

        nnoremap <leader>tacsubs :AlignCtrl p0P1lrrr<CR>

    " }}}

    " Delimitmate {{{

        let g:delimitmat_expand_cr = 2       " Expand all <CR>s
        let g:delimitmat_expand_space = 1    " Expand <SPACE>

    " }}}

    " Easymotion {{{

        map Q <Plug>(easymotion-prefix)

    " }}}

    " Gitgutter {{{

        let g:gitgutter_realtime=1
        let g:gitgutter_eager=1
        let g:gitgutter_sign_column_always=1
        let g:gitgutter_updatetime=500

    " }}}

    " Indentline {{{

        let g:indentLine_enabled = 1
        "let g:indentLine_char = '│'
        let g:indentLine_char = '¦'

        " Can't find the right color
        " let g:indentLine_color_term = 64                      " Can't find the right color
        let g:indentLine_color_gui = '#586E75'

    " }}}

    " NERDCommenter {{{
        let g:NERDCustomDelimiters = { 'rml': { 'left': "<!--", 'right': "-->" } }
    " }}}

    " vim-flake8 {{{

        let g:flake8_show_in_file=0                             " SUPER annoying

        "autocmd BufWritePost *.py call Flake8()
        "autocmd FileType python map <buffer> <leader>f :call Flake8()<CR>

    " }}}

    " vim-vinegar {{{
        let g:netrw_liststyle=3                                 " Makes 'tree' default netrw listing
    " }}}

    " Unused {{{
        " Diffchar {{{

            "let g:DiffUpdate = 1                                        " Interactively update highlights

        " }}}
    " }}}

" }}}

" Functions {{{

    " Numbers {{{

        function! NumberToggle()
        " ALL the numbering options!
            if    (&relativenumber == 0 && &number == 0)
                set norelativenumber
                set number
            elseif(&relativenumber == 0 && &number == 1)
                set relativenumber
                set nonumber
            elseif(&relativenumber == 1 && &number == 0)
                set relativenumber
                set number
            else " &relativenumber == 1 && &number == 1
                set norelativenumber
                set nonumber
            endif
        endfunc

        " :NumberToggle to toggle numbering
        command! NumberToggle call NumberToggle()
        command! JsNumberToggle call NumberToggle()

    " }}}

    " Whitespace {{{

        function! FixWhitespace(line1,line2)
            let l:save_cursor = getpos(".")
            silent! execute ':' . a:line1 . ',' . a:line2 . 's/\s\+$//e'
            call setpos('.', l:save_cursor)
        endfunction

        " Run :FixWhitespace to remove end of line white space
        command! -range=% FixWhitespace call FixWhitespace(<line1>,<line2>)
        command! -range=% StripTrailingWhitespace call FixWhitespace(<line1>,<line2>)
        command! -range=% JSFixWhitespace call FixWhitespace(<line1>,<line2>)

    " }}}

    " Tabs {{{

        " https://github.com/johntyree/dotfiles/blob/master/vimrc
        command! -nargs=1 -bar Tabm exe 'tabm ' . (tabpagenr() + <args> - 1)

    " }}}

    " DiffOrig {{{

        " Convenient command to see the difference between the current buffer
        " and the file it was loaded from, thus the changes you made. Only
        " define it when not defined already.
        if !exists(":DiffOrig")
            command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
                        \ | wincmd p | diffthis
        endif

    " }}}

" }}}

" Maps {{{

    " CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
    " so that you can undo CTRL-U after inserting a line break.
    inoremap <C-U> <C-G>u<C-U>

    " <Esc> sucks {{{

        inoremap fj <Esc>
        nnoremap fj :noh<return>

    " }}}

    " Make Y act like C and D
    nnoremap Y y$

    " Tab changes tabs {{{
        nnoremap <TAB> gt
        vnoremap <TAB> gt
        nnoremap <S-TAB> gT
        vnoremap <S-TAB> gT
    " }}}

    " Better split windows {{{
        nnoremap <C-h> <C-W><C-h>
        nnoremap <C-j> <C-W><C-j>
        nnoremap <C-k> <C-W><C-k>
        nnoremap <C-l> <C-W><C-l>
    " }}}

    " Toggle relativenumber and number
    nnoremap <C-n> :call NumberToggle()<cr>

    " keep text selected after shifting {{{
        vnoremap < <gv
        vnoremap > >gv
    " }}}

    " : sucks {{{

        nnoremap <Space> :
        vnoremap <Space> :

    " }}}

    " Support for multi-line lines {{{

        nnoremap j gj
        vnoremap j gj
        nnoremap k gk
        vnoremap k gk
        inoremap <silent> <Up> <C-o>gk
        inoremap <silent> <Down> <C-o>gj
        ""nnoremap 0 g0
        ""vnoremap 0 g0
        ""nnoremap ^ g^
        ""vnoremap ^ g^
        ""nnoremap $ g$
        ""vnoremap $ g$
        " And switch.
        nnoremap gj j
        vnoremap gj j
        nnoremap gk k
        vnoremap gk k
        "inoremap <silent> <Up> <C-o>gk         " Not these
        "inoremap <silent> <Down> <C-o>gj       " Not these
        ""nnoremap g0 0
        ""vnoremap g0 0
        ""nnoremap g^ ^
        ""vnoremap g^ ^
        ""nnoremap g$ $
        ""vnoremap g$ $

    " }}}

    " Faster scrolling {{{

        nnoremap <C-e> 2<C-e>
        vnoremap <C-e> 2<C-e>
        nnoremap <C-y> 2<C-y>
        vnoremap <C-y> 2<C-y>

    " }}}

    " Enable emacs-style editing of command-line mode {{{

        cnoremap <C-A>      <Home>
        cnoremap <C-B>      <Left>
        cnoremap <C-E>      <End>
        cnoremap <C-F>      <Right>
        cnoremap <C-N>      <Down>
        cnoremap <C-P>      <Up>
        cnoremap <C-D>      <Del>
        cnoremap <ESC>b     <S-Left>
        cnoremap <ESC><C-B> <S-Left>
        cnoremap <ESC>f     <S-Right>
        cnoremap <ESC><C-F> <S-Right>
        cnoremap <ESC><C-H> <C-W>
        cnoremap <ESC>d     <S-Right><Right><C-W>
        cnoremap <C-U>      <C-E><C-U>
        cnoremap <C-K>      <C-\>estrpart(getcmdline(),0,getcmdpos()-1)<CR>

    " }}}

    " leader stuff {{{

        let mapleader=","
        nnoremap \ ,

        " Toggle autochdir.
        nnoremap <leader>a :set autochdir!<CR>:set autochdir?<CR>

        " Toggle list
        nnoremap <leader>l :set list!<CR>:set list?<CR>

        " Make session
        nnoremap <leader>m :mks!

        " Make default session
        nnoremap <leader>ms :mks! Session.vim<CR>

        " Toggle paste mode
        nnoremap <leader>p :set paste!<CR>:set paste?<CR>
        " set pastetoggle=<leader>p

        " Toggle spell
        nnoremap <leader>s :set spell!<CR>:set spell?<CR>

        " Toggle wrap
        nnoremap <leader>wr :set wrap!<CR>:set wrap?<CR>

        " Unhighlight search
        nnoremap <leader>/ :noh<CR>

        " Comment out ("\\") selected area.
        vnoremap <leader>; :s/^/\/\/<CR>:noh<CR>

        " Edit my rc in a new tab
        nnoremap <leader>\e :tabe ~/.vimrc<CR>

        " Source my rc (Kinda unnecessary cause autocmd)
        nnoremap <leader>\s :so ~/.vimrc<CR>

        " Save from insert mode
        inoremap <leader>w <ESC>:w<CR>a

        " Show word count
        nnoremap <leader>wo :w !wc -w<CR>
        nnoremap <leader>wc :w !wc -w<CR>

        " Change background color
        nnoremap <leader>bgd :set bg=dark<CR>
        nnoremap <leader>bgl :set bg=light<CR>

        " Works, but wonderfully and tremendously hacked.
        nnoremap <leader>gitconfig :%s/\n[^[]/THISTEXTNOTINFILE/<CR>:sort<CR>/\[core\]<CR>ddggP/[remote<CR>VNxggp/\[branch "master"\]<CR>dd?[remote<CR>p:%s/THISTEXTNOTINFILE/\r\t<CR>

        noremap <leader>gt :Tabm +1<CR>
        noremap <leader>gT :Tabm -1<CR>

    " }}}

    " Bubble lines {{{

        "http://vimcasts.org/episodes/bubbling-text/
        nmap <C-Up> ddkP
        nmap <C-Down> ddp

        "Bubble multiple lines
        vmap <C-Up> xkP`[V`]
        vmap <C-Down> xp`[V`]

    " }}}

    " Insert mode scrolling {{{

        " :h i_ctrl-x
        inoremap <C-E> <C-X><C-E>
        inoremap <C-Y> <C-X><C-Y>

    " }}}

    " Default tabbing {{{

        map <leader><tab> <Esc>:Tabularize /,/r0r1<CR>

    " }}}

" }}}

" OS {{{
" }}}

" Autos {{{

    if has("autocmd")

    " Whitespace {{{

        "Invisible character colors
        " nbsp, tab, trail
        " highlight SpecialKey guifg=red guibg=darkgrey ctermfg=red ctermbg=darkgrey
        highlight SpecialKey guibg=darkgrey ctermbg=darkgrey

        augroup Whitespace
            au!
            au BufEnter    * match ExtraWhitespace /\s\+$/
            au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
            au InsertLeave * match ExtraWhitespace /\s\+$/
            au ColorScheme * highlight ExtraWhitespace ctermbg=darkgrey ctermfg=red
                                                     \ guibg=#dc322f guifg=#839496

        augroup end
        " highlight ExtraWhitespace ctermbg=red ctermfg=white guibg=#dc322f guifg=#839496
        highlight ExtraWhitespace ctermbg=darkgrey ctermfg=red guibg=#dc322f guifg=#839496

    " }}}

    " txt {{{

        augroup txt
            au!
            au BufRead,BufNewFile *.txt     setfiletype text
            au FileType text setlocal ai spell textwidth=80
        augroup end

    " }}}

    " Ada {{{

        augroup ADA
            au!
            au BufRead,BufNewFile *.ads setfiletype ada
            au BufRead,BufNewFile *.adb setfiletype ada
            au FileType ada setlocal sts=3 ts=3 sw=3
        augroup end

    " }}}

    " Python {{{
        
        augroup Python
            au!
            au FileType python 
        augroup END

    " vimrc {{{

        augroup vimrc
            au!
            "" TODO: Get this working {{{

            "    if has('win32')
            "        let vim_files='~/_vimrc,~/vimfiles/rc/*'
            "    else  " *nixish
            "        let vim_files='~/.vimrc,~/.vim/rc/*'
            "    endif
            "    autocmd bufwritepost vim_files source %
            "    autocmd BufWritePost vim_files AirlineRefresh
            "    autocmd BufWritePost vim_files IndentLinesReset

            "" }}}

            if has('win32')
                autocmd bufwritepost ~/_vimrc,~/vimfiles/rc/* source %
                autocmd BufWritePost ~/_vimrc,~/vimfiles/rc/* AirlineRefresh
                autocmd BufWritePost ~/_vimrc,~/vimfiles/rc/* IndentLinesReset
            else
                autocmd bufwritepost ~/.vimrc,~/.vim/rc/* source %
                autocmd BufWritePost ~/.vimrc,~/.vim/rc/* AirlineRefresh
                autocmd BufWritePost ~/.vimrc,~/.vim/rc/* IndentLinesReset
            endif
        augroup end

    " }}}

    " Autosave {{{
        " A little too crazy for group git development...
        " autocmd FileType c,cpp,java,php,ruby,python,html autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()"
    " }}}

    endif  " has("autocmd")

" }}}

" Abbreviations {{{

    abbreviate teh the
    abbreviate fro for

" }}}


" Testing {{{

" }}}

" }}}

" Testing {{{

    " Powerline fonts
    "set guifont=Inconsolata\ for\ Powerline:h15
    "let g:Powerline_symbols = 'fancy'

    " cd ~

" }}}
